#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <iostream>

#define min(x,y) (x>y) ? y : x
#define max(x,y) (x>y) ? x : y

const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;

bool init(SDL_Window *&window, SDL_Renderer *&renderer) {
    if(SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cout << "SDL could not initialize. SDL_Error: " << SDL_GetError() << '\n';
        return false;
    }

    window = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    if(!window) {
        std::cout << "Window could not initialize. SDL_Error: " << SDL_GetError() << '\n';
        return false;
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    return true;
}

void cleanup(SDL_Window *window) {
    SDL_DestroyWindow(window);
    window = NULL;
    SDL_Quit();
}

int main(void) {
    SDL_Window *window;
    SDL_Renderer *renderer;
    SDL_Surface *load_surface;
    SDL_Texture *pacman;

    if (!init(window, renderer)) {
        return 1;
    }

    load_surface = IMG_Load("./pacman.png");
    if(!load_surface) {
        std::cout << "Unable to load image pacman.png. SDL_Error: " << IMG_GetError() << '\n';
        return 1;
    }
    pacman = SDL_CreateTextureFromSurface(renderer, load_surface);
    SDL_FreeSurface(load_surface);

    bool stop = false;
    bool win = false;
    int x = 0;
    int y = 0;
    const SDL_Rect goal = {320, 220, 16, 16};
    while (!stop) {
        SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0xFF);
        const SDL_Rect bg = {0, 0, SCREEN_WIDTH, SCREEN_HEIGHT};
        SDL_RenderFillRect(renderer, &bg);

        SDL_Event e;
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) stop = true;
        }
        SDL_PumpEvents();
        const Uint8 *keystate = SDL_GetKeyboardState(NULL);
        if (keystate[SDL_SCANCODE_UP]) y-=1;
        if (keystate[SDL_SCANCODE_DOWN]) y+=1;
        if (keystate[SDL_SCANCODE_RIGHT]) x+=1;
        if (keystate[SDL_SCANCODE_LEFT]) x-=1;
        if (keystate[SDL_SCANCODE_ESCAPE]) stop=true;
        x = min(max(0, x), SCREEN_WIDTH-32);
        y = min(max(0, y), SCREEN_HEIGHT-32);
        const SDL_Rect dst = {x, y, 32, 32};

        SDL_SetRenderDrawColor(renderer, 0xFF, 0xC7, 0x00, 0xFF);
        if (!win) {
            SDL_RenderFillRect(renderer, &goal);
            if (SDL_HasIntersection(&dst, &goal)) {
                win = true;
                std::cout << "WIN";
            }
        }

        SDL_RenderCopy(renderer, pacman, NULL, &dst);
        SDL_RenderPresent(renderer);
    }

    SDL_DestroyTexture(pacman);
    SDL_DestroyRenderer(renderer);
    cleanup(window);
    return 0;
}

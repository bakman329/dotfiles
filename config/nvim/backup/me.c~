#include <stdio.h>
#include <stdlib.h>

#define VER(x) (x) % 16
#define MEMSIZE 16

typedef void (*instruction)(void);

int pc, is, r0, r1;
int mem[MEMSIZE];

// void hal() {
//     exit(0);
// }

void ld0() {
    r0 = mem[pc+1];
    pc += 2;
}

void ld1() {
    r1 = mem[pc+1];
    pc += 2;
}

void in0() {
    r0 += 1;
    pc += 1;
}

void in1() {
    r1 += 1;
    pc += 1;
}

void add() {
    r0 += r1;
    pc += 1;
}

void sub() {
    r0 -= r1;
    pc += 1;
}

void str0() {
    mem[mem[pc+1]] = r0;
    pc += 2;
}

void str1() {
    mem[mem[pc+1]] = r1;
    pc += 2;
}

void prt() {
    printf("%d\n", mem[mem[pc+1]]);
    pc += 2;
}

void jmp() {
    pc = mem[pc+1];
}

void jpe() {
    if (r0 == r1) {
        jmp();
    }
    else {
        pc += 1;
    }
}

void jpn() {
    if (r0 != r1) {
        jmp();
    }
    else {
        pc += 2;
    }
}

void cl0() {
    r0 = 0;
    pc += 1;
}
void cl1() {
    r1 = 0;
    pc += 1;
}

void cp0() {
    r1 = r0;
    pc += 1;
}

void cp1() {
    r1 = r0;
    pc += 1;
}

void dng() {
    printf("ding!\n");
    pc += 1;
}

instruction instructions[17] = {ld0, ld1, in0, in1, add, sub, str0, str1, prt, jmp, jpe, jpn, cl0, cl1, cp0, cp1, dng};

int main(int argc, char **argv) {
    int i;
    for (i=0; i<argc - 1;i ++) {
       mem[i] = VER(atoi(argv[i+1]));
    }
    for (;i<=MEMSIZE;i++) {
       mem[i] = 0;
    }

    pc = is = r0 = r1 = 0;

    while (1) {
       is = mem[pc];
       if (is == 0) {
          break;
       }
       instructions[is - 1]();
    }
    return 0;
}
